What happens when you initialize a repository? Why do you need to do it?
	
	When a repository is initialized a directory .git is created that will store the metadata of the git repository.  Without initializing the repository the .git file will not be created and the computer will not know the directory is actually a git repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a group of files that will be committed in the next commit command.  The working directory contains all files in the repository that might have changes, but are not ready to be committed and the repository is the combination of the staging area and working directory.  The staging area allows the user to decide what files have reached a logical point to be committed and continue to work on other files until they reach that point giving them greater flexibility to determine what file or groups of files are ready to be committed without having to commit the entire directory with changes at once.


How can you use the staging area to make sure you have one commit per logical change?
	
	You can select the files that belong in the staging area and commit them as the logical changes make sense.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branching is useful to test new features or new layouts for the code and to be experimental without impacting the master set of code.


How do the diagrams help you visualize the branch structure?

	Within a repository commits on one branch might not be reachable to other branches.  Visualizing the branch structure makes identifying what commits are available on the branch simpler.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	
	When you merge two branches together you get a combination of the two branches where the previous versions remain available in the repository.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	
	Automatic merging can help resolve changes similar to both files while calling out only the discrepancies between the files.  The Con is if a change is made only in one file then the merge will not flag that as a difference.